rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isUserRole(userId, role) {
      let userData = getUserData(userId);
      return userData.role == role;
    }

    function isOrganizer() {
      return isSignedIn() && isUserRole(request.auth.uid, 'organizer');
    }

    function isAuthor() {
      return isSignedIn() && isUserRole(request.auth.uid, 'author');
    }

    function isReviewer() {
      return isSignedIn() && isUserRole(request.auth.uid, 'reviewer');
    }

    match /users/{userId} {
      allow get: if isUser(userId) || isOrganizer();
      allow list: if isSignedIn();
      allow create: if isUser(userId)
                    && request.resource.data.name is string
                    && request.resource.data.email is string
                    && request.resource.data.role in ['organizer', 'author', 'reviewer'];
      allow update: if isUser(userId)
                    && request.resource.data.diff(resource.data).changedKeys().hasOnly(['name', 'role'])
                    && (!request.resource.data.diff(resource.data).changedKeys().hasAny(['name']) || request.resource.data.name is string)
                    && (!request.resource.data.diff(resource.data).changedKeys().hasAny(['role']) || request.resource.data.role in ['organizer', 'author', 'reviewer']);
      allow delete: if false;
    }

    match /conferences/{conferenceId} {
      allow read: if true;
      allow create: if isOrganizer()
                    && request.resource.data.organizerId == request.auth.uid
                    && request.resource.data.name is string
                    && request.resource.data.location is string
                    && request.resource.data.description is string
                    && request.resource.data.startDate is timestamp
                    && request.resource.data.endDate is timestamp;
      allow update, delete: if isSignedIn() && resource.data.organizerId == request.auth.uid;
    }

    match /papers/{paperId} {
      allow get: if isSignedIn()
                  && (resource.data.authorId == request.auth.uid
                      || request.auth.uid in resource.data.reviewers
                      || isOrganizer());
      allow list: if isAuthor() || isReviewer() || isOrganizer();
      allow create: if isAuthor()
                    && request.resource.data.authorId == request.auth.uid
                    && request.resource.data.title is string
                    && request.resource.data.conferenceId is string
                    && request.resource.data.reviewers is list
                    && request.resource.data.reviewerStatuses is map
                    && (!request.resource.data.keys().hasAny(['reviewerFeedback'])
                      || request.resource.data.reviewerFeedback is map);
      allow update: if isSignedIn()
                    && (
                      (isReviewer()
                        && request.auth.uid in resource.data.reviewers
                        && request.resource.data.keys().hasAll(['reviewerStatuses', 'updatedAt'])
                        && request.resource.data.reviewerStatuses.diff(resource.data.reviewerStatuses).affectedKeys().hasOnly([request.auth.uid])
                        && (!request.resource.data.keys().hasAny(['reviewerFeedback'])
                          || (request.resource.data.reviewerFeedback is map
                            && (
                              resource.data.reviewerFeedback is map
                                ? request.resource.data.reviewerFeedback.diff(resource.data.reviewerFeedback).affectedKeys().hasOnly([request.auth.uid])
                                : request.resource.data.reviewerFeedback.keys().hasOnly([request.auth.uid])
                            ))))
                      || (isOrganizer()
                        && request.resource.data.keys().hasAll(['reviewers', 'reviewerStatuses', 'updatedAt'])
                        && request.resource.data.reviewers is list
                        && (!request.resource.data.keys().hasAny(['reviewerFeedback'])
                          || request.resource.data.reviewerFeedback is map))
                      || (isAuthor()
                        && resource.data.authorId == request.auth.uid
                        && request.resource.data.authorId == resource.data.authorId
                        && request.resource.data.conferenceId == resource.data.conferenceId
                        && request.resource.data.reviewers == resource.data.reviewers
                        && request.resource.data.reviewerStatuses == resource.data.reviewerStatuses
                        && request.resource.data.reviewerFeedback == resource.data.reviewerFeedback
                        && request.resource.data.createdAt == resource.data.createdAt
                        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['title', 'file', 'fileUploadedAt', 'updatedAt'])
                        && (!request.resource.data.diff(resource.data).changedKeys().hasAny(['title']) || request.resource.data.title is string)
                        && (!request.resource.data.diff(resource.data).changedKeys().hasAny(['file'])
                          || (request.resource.data.file is map
                            && request.resource.data.file.name is string
                            && request.resource.data.file.storagePath is string
                            && request.resource.data.file.storageBucket is string
                            && request.resource.data.file.downloadToken is string))
                        && (!request.resource.data.diff(resource.data).changedKeys().hasAny(['fileUploadedAt']) || request.resource.data.fileUploadedAt is timestamp)
                        && (!request.resource.data.diff(resource.data).changedKeys().hasAny(['updatedAt']) || request.resource.data.updatedAt is timestamp))
                    );
      allow delete: if isSignedIn() && (isOrganizer() || resource.data.authorId == request.auth.uid);
    }
  }
}
